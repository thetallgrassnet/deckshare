#!/usr/bin/env ruby
require 'pathname'
require 'timeout'
require 'socket'

# path to your application root.
APP_ROOT = Pathname.new File.expand_path('../../',  __FILE__)

def get_ip container, port
  ip, port = `docker port #{container} #{port}`.strip.split ':'

  if `which boot2docker`.strip.length > 0
    ip = `boot2docker ip`.strip
  end

  return ip, port
end

def start_db env
  `docker start deckshare-#{env}-db`

  tries = 0

  ip, port = get_ip "deckshare-#{env}-db", 7474

  print "Waiting for deckshare-#{env}-db"

  until tries == 30
    print "."
    begin
      Timeout::timeout(1) do
        begin
          s = TCPSocket.new ip, port.to_i
          s.close
          print "available at http://#{ip}:#{port}\n"
          return
        rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH
          system "sleep 1"
          tries += 1
        end
      end
    rescue Timeout::Error
      tries += 1
    end
  end

  print "failed to become available\n"
  raise
end

def stop_db env
  `docker stop deckshare-#{env}-db`
end

def run env, cmd, args = []
  start_db env
  system "docker run -i -t --link deckshare-#{env}-db:db --volumes-from deckshare-dev --rm deckshare #{cmd} #{args.join " "}"
end

Dir.chdir APP_ROOT do
  cmd = ARGV.shift

  case cmd
  when "start"
    start_db "dev"
    system "docker start deckshare-dev"

    ip, port = get_ip "deckshare-dev", 3000
    puts "Server available at http://#{ip}:#{port}"

    system "docker attach deckshare-dev"
  when "stop"
    system "docker stop deckshare-dev"
    stop_db "dev"
    stop_db "test"
  when "spec"
    run "test", "bin/rspec", ARGV
  when "run"
    cmd = ARGV.shift
    run "dev", cmd, ARGV
  else
    puts "Usage: bin/d {start|stop|spec [ARGUMENTS]|run COMMAND [ARGUMENTS]}"
  end
end
